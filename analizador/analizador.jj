// ignorar mayúsculas y minúsculas
options {
    IGNORE_CASE = true;
    static = false;
}
PARSER_BEGIN(analizador)
import java.io.*;
import java.util.*;

public class analizador {

    private static File codigoFuente;

    public static void main(String[] args) {
        codigoFuente = new File(args[0]);
        try {
            analizadorTokenManager lexicManager = new analizadorTokenManager(new SimpleCharStream(new FileReader(codigoFuente)));
            analizador parser = new analizador(lexicManager);
            Token token;
            try {
                parser.Main();
            } catch (Exception ex) {
                System.out.println("Error sintáctico completo");
            }
        } catch (TokenMgrError exa) {
            System.err.println("Error de token");
        } catch (FileNotFoundException exb) {
            System.err.println("No se pudo encontrar el archivo de código fuente.");
        }
	System.out.println("Fin de la revisión");
    }
}
PARSER_END(analizador)

// evitamos los salto de línea, tabulaciones o retorno de carro 
SKIP: {
    " "
    |"\r"  
    |"\t"
    |"\n"
}

TOKEN_MGR_DECLS : {
        public Token getNextTokenB() {
        boolean bandera = false;
        Token matchedToken = null;
        int curPos = 0;
        boolean eofReached = false;
        int invalidTokenStartLine = -1;
        int invalidTokenStartColumn = -1;

        while (!eofReached) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                jjmatchedPos = -1;
                matchedToken = jjFillToken();
                return matchedToken;
            }

            try {
                input_stream.backup(0);
                while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L) {
                    curChar = input_stream.BeginToken();
                }
            } catch (java.io.IOException e1) {
                continue;
            }
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            
            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos) {
                    input_stream.backup(curPos - jjmatchedPos - 1);
                }
                
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();
                    return matchedToken;
                }
                
            } else {
                if (invalidTokenStartLine == -1) {
                    invalidTokenStartLine = input_stream.getEndLine();
                    invalidTokenStartColumn = input_stream.getEndColumn();
                    System.out.println("Error léxico encontrado en línea " + invalidTokenStartLine + ", columna " + invalidTokenStartColumn + " se encontró un: " + curChar);
                    System.out.println("Para corregir el error elimina el carácter inválido");
                }
            }
            try {
                input_stream.readChar();
                
            } catch (java.io.IOException e1) {
                eofReached = true;
                
            }
            
        }
        matchedToken = jjFillToken();
        matchedToken.kind = analizadorTokenManager.EOF;
        return matchedToken;
    }
   
}
// palabras reservadas
TOKEN: {
    <INIT: "init"> {}
    |<END: "end"> {}
    |<INTEGER: "int"> {}
    |<FLOAT: "float"> {}
    |<BOOLEANO: "bool"> {}
    |<STRING: "string"> {}
    |<PI: "pi"> {}
    |<EULER: "euler"> {}
    |<CONSTANT: "constant"> {}
    |<AND: "and"> {}
    |<OR: "or"> {}
    |<NOT: "not"> {}
    |<PRINT: "print"> {}
    |<INPUT: "read"> {}
    |<IF: "if"> {}
    |<ELSE: "else"> {}
    |<ELSE_IF: "elseif"> {}
    |<WHILE: "while"> {}
    |<DO: "do"> {}
    |<DEFINE_FUNC: "define"> {}
    |<GET_RETURN_FUNC: "get"> {}
    |<TRUE: "true"> {}
    |<FALSE: "false"> {}
    |<VOID: "void"> {}
}
// operadores aritméticos
TOKEN: {
    <SUMA: "+"> {}
    |<RESTA: "-"> {}
    |<MULTI: "*"> {}
    |<DIV: "/"> {}
}
// operadores de comparación
TOKEN: {
    <IGUAL_QUE: "=?"> {}
    |<DIFERENTE_QUE: "!=?"> {}
    |<MAYOR_QUE: ">?"> {}
    |<MENOR_QUE: "<?"> {}
    |<MAYOR_IGUAL_QUE: ">=?"> {}
    |<MENOR_IGUAL_QUE: "<=?"> {}
}
// asignación
TOKEN: {
    <ASIGNA: "="> {}
}
// delimitadores
TOKEN: {
    <FIN_LINE: ";"> {}
    |<LLAVE_IZQ: "{"> {}
    |<LLAVE_DER: "}"> {}
    |<PAREN_IZQ: "("> {}
    |<PAREN_DER: ")"> {}
    |<CORCH_IZQ: "["> {}
    |<CORCH_DER: "]"> {}
    |<DOBLE_PUNTO: ":"> {}
    |<COMA: ","> {}
    |<PUNTO: "."> {}
}
// nombres de variables
TOKEN: {
    <NOMBRE_VAR: (["a"-"z"]|["A"-"Z"])(["a"-"z"]|["A"-"Z"]["0"-"9"])*> {}
}
// números
TOKEN: {
    <NUMERO: (["0"-"9"])+> {}
}
// cadenas
TOKEN: {
    <CADENA: "\""(["a"-"z"]|["A"-"Z"]|["0"-"9"]|[" "]|[","]|["."]|["!"])+"\""> {}
    |<CARACTER: "'"(["a"-"z"]|["A"-"Z"]|["0"-"9"]|[" "]|[","]|["."]|["!"])+"'"> {}
}
void Main():
{}
{
    Programa() <EOF>
}

void Programa():
{}
{
    Inicio()
    (Proceso())*
}

void Inicio():
{}
{
    try{<INIT>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró init en la línea "+token.beginLine+", columna "+token.beginColumn);}
    try{<LLAVE_IZQ>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró llave izquierda { en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    Sentencias()
    try{<LLAVE_DER>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró llave derecha } en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    try{<END>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró end en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    try{<FIN_LINE>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró punto y coma ; en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
}
void Sentencias():
{}
{
    (
    LOOKAHEAD(1)
    Impresion()
    |
    If()
    |
    Declaracion()
    |
    Inicializacion()
    |
    Lectura()
    |
    While()
    |
    DoWhile()	
    )*
}
void Inicializacion():
{}
{
    <NOMBRE_VAR>
    try{<ASIGNA>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró delimitador de asignación =, en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    try{(<NUMERO>(Operacion())*|<CADENA>|Arreglo()|<NOMBRE_VAR>)}catch(ParseException ex){System.out.println("Error sintáctico, no se terminó la inicialización en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    try{<FIN_LINE>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró punto y coma ; en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
}
void Proceso():
{}
{
    <DEFINE_FUNC>
    try{<VOID>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró palabra reservada void, en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    try{<NOMBRE_VAR>}catch(ParseException ex){System.out.println("Error sintáctico, no se definió el nombre del procedimiento en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    try{<PAREN_IZQ>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró paréntesis izquierdo ( en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    try{<PAREN_DER>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró paréntesis derecho ) en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    try{<LLAVE_IZQ>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró llave izquierda { en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    Sentencias()
    try{<LLAVE_DER>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró llave derecha } en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
}
void Lectura():
{}
{
    <INPUT>
    try{(<NOMBRE_VAR>(<PAREN_IZQ><PAREN_DER>)*)}catch(ParseException ex){System.out.println("Error sintáctico, no se detectó un nombre de variable para leer en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    try{<FIN_LINE>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró punto y coma ; en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
}
void Impresion():
{}
{
    <PRINT>
    try{<PAREN_IZQ>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró paréntesis izquierdo ( en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    try{(<CADENA>|<NOMBRE_VAR>(Arreglo())*|(<NUMERO>(Operacion())*))}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró una cadena, operación o nombre de variable para imprimir en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    try{<PAREN_DER>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró paréntesis derecho ) en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    try{<FIN_LINE>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró punto y coma ; en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
}
void Operacion():
{}
{
    ((<SUMA>|<RESTA>|<MULTI>|<DIV>)
    (<NUMERO>|<NOMBRE_VAR>))|((<AND>|<OR>|<NOT>)(<NUMERO>|<NOMBRE_VAR>))
}
void While():
{}
{
    <WHILE>
    try{<PAREN_IZQ>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró paréntesis izquierdo ( en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    ComparacionLogica()
    try{<PAREN_DER>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró paréntesis derecho ) en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    try{<LLAVE_IZQ>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró llave izquierda { en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    Sentencias()
    try{<LLAVE_DER>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró llave derecha } en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
}
void DoWhile():
{}
{
    <DO>
    try{<LLAVE_IZQ>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró llave izquierda { en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    Sentencias()
    try{<LLAVE_DER>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró llave derecha } en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    try{<WHILE>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró while en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    try{<PAREN_IZQ>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró paréntesis izquierdo ( en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    ComparacionLogica()
    try{<PAREN_DER>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró paréntesis derecho ) en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    try{<FIN_LINE>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró punto y coma ; en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
}
void Declaracion():
{}
{
    (<INTEGER>|<FLOAT>|<BOOLEANO>|<STRING>)
    <NOMBRE_VAR>
    try{(<ASIGNA> (<NUMERO>(Operacion())*|<CADENA>|Arreglo()|(<NOMBRE_VAR>(Operacion())*)))*}catch(ParseException ex){System.out.println("Error sintáctico, no se terminó la inicialización en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    try{<FIN_LINE>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró punto y coma ; en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
}
void Arreglo():
{}
{
    try{<CORCH_IZQ>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró corchete izquierdo [ en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    try{<NUMERO>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró un número en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    try{<CORCH_DER>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró corchete derecho ] en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    (Arreglo())*
}
void ComparacionLogica():
{}
{
    try{(<NOMBRE_VAR>|<NUMERO>)}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró un operador para la comparación lógica en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    Comparaciones()
    try{(<NOMBRE_VAR>|<NUMERO>)}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró un operador para la comparación lógica en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
}
void Comparaciones():
{}
{
    try{<IGUAL_QUE>
    |
    <DIFERENTE_QUE>
    |
    <MAYOR_QUE>
    |
    <MENOR_QUE>
    |
    <MAYOR_IGUAL_QUE>
    |
    <MENOR_IGUAL_QUE>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró un token de comparación lógica en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
}
void If():
{}
{
    <IF>
    try{<PAREN_IZQ>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró paréntesis izquierdo ( en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    ComparacionLogica()
    try{<PAREN_DER>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró paréntesis derecho ) en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    try{<LLAVE_IZQ>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró llave izquierda { en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    Sentencias()
    try{<LLAVE_DER>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró llave derecha } en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    (Elseif())*
    (Else())*
}
void Elseif():
{}
{
    <ELSE_IF>
    try{<PAREN_IZQ>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró paréntesis izquierdo ( en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    ComparacionLogica()
    try{<PAREN_DER>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró paréntesis derecho ) en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    try{<LLAVE_IZQ>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró llave izquierda { en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    Sentencias()
    try{<LLAVE_DER>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró llave derecha } en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
}
void Else():
{}
{
    <ELSE>
    try{<LLAVE_IZQ>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró llave izquierda { en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
    Sentencias()
    try{<LLAVE_DER>}catch(ParseException ex){System.out.println("Error sintáctico, no se encontró llave derecha } en la línea "+token.beginLine+", columna "+token.beginColumn+" después de "+token.image);}
}