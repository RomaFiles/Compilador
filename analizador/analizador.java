/* analizador.java */
/* Generated By:JavaCC: Do not edit this line. analizador.java */
import java.io.*;
import java.util.*;

public class analizador implements analizadorConstants {

    private static File codigoFuente;

    public static void main(String[] args) {
        codigoFuente = new File(args[0]);
        try {
            analizadorTokenManager lexicManager = new analizadorTokenManager(new SimpleCharStream(new FileReader(codigoFuente)));
            analizador parser = new analizador(lexicManager);
            Token token;
            try {
                parser.Main();
            } catch (Exception ex) {
                System.out.println("Error sint\u00e1ctico completo");
            }
        } catch (TokenMgrError exa) {
            System.err.println("Error de token");
        } catch (FileNotFoundException exb) {
            System.err.println("No se pudo encontrar el archivo de c\u00f3digo fuente.");
        }
        System.out.println("Fin de la revisi\u00f3n");
    }

  final public void Main() throws ParseException {
    Programa();
    jj_consume_token(0);
  }

  final public void Programa() throws ParseException {
    Inicio();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DEFINE_FUNC:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Proceso();
    }
  }

  final public void Inicio() throws ParseException {
    try {
      jj_consume_token(INIT);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 init en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn);
    }
    try {
      jj_consume_token(LLAVE_IZQ);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 llave izquierda { en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    Sentencias();
    try {
      jj_consume_token(LLAVE_DER);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 llave derecha } en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    try {
      jj_consume_token(END);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 end en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    try {
      jj_consume_token(FIN_LINE);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 punto y coma ; en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
  }

  final public void Sentencias() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:
      case FLOAT:
      case BOOLEANO:
      case STRING:
      case PRINT:
      case INPUT:
      case IF:
      case WHILE:
      case DO:
      case NOMBRE_VAR:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRINT:{
        Impresion();
        break;
        }
      case IF:{
        If();
        break;
        }
      case INTEGER:
      case FLOAT:
      case BOOLEANO:
      case STRING:{
        Declaracion();
        break;
        }
      case NOMBRE_VAR:{
        Inicializacion();
        break;
        }
      case INPUT:{
        Lectura();
        break;
        }
      case WHILE:{
        While();
        break;
        }
      case DO:{
        DoWhile();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Inicializacion() throws ParseException {
    jj_consume_token(NOMBRE_VAR);
    try {
      jj_consume_token(ASIGNA);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 delimitador de asignaci\u00f3n =, en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMERO:{
        jj_consume_token(NUMERO);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case AND:
          case OR:
          case NOT:
          case SUMA:
          case RESTA:
          case MULTI:
          case DIV:{
            ;
            break;
            }
          default:
            jj_la1[3] = jj_gen;
            break label_3;
          }
          Operacion();
        }
        break;
        }
      case CADENA:{
        jj_consume_token(CADENA);
        break;
        }
      case CORCH_IZQ:{
        Arreglo();
        break;
        }
      case NOMBRE_VAR:{
        jj_consume_token(NOMBRE_VAR);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se termin\u00f3 la inicializaci\u00f3n en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    try {
      jj_consume_token(FIN_LINE);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 punto y coma ; en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
  }

  final public void Proceso() throws ParseException {
    jj_consume_token(DEFINE_FUNC);
    try {
      jj_consume_token(VOID);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 palabra reservada void, en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    try {
      jj_consume_token(NOMBRE_VAR);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se defini\u00f3 el nombre del procedimiento en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    try {
      jj_consume_token(PAREN_IZQ);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 par\u00e9ntesis izquierdo ( en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    try {
      jj_consume_token(PAREN_DER);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 par\u00e9ntesis derecho ) en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    try {
      jj_consume_token(LLAVE_IZQ);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 llave izquierda { en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    Sentencias();
    try {
      jj_consume_token(LLAVE_DER);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 llave derecha } en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
  }

  final public void Lectura() throws ParseException {
    jj_consume_token(INPUT);
    try {
      jj_consume_token(NOMBRE_VAR);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PAREN_IZQ:{
          ;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
        jj_consume_token(PAREN_IZQ);
        jj_consume_token(PAREN_DER);
      }
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se detect\u00f3 un nombre de variable para leer en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    try {
      jj_consume_token(FIN_LINE);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 punto y coma ; en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
  }

  final public void Impresion() throws ParseException {
    jj_consume_token(PRINT);
    try {
      jj_consume_token(PAREN_IZQ);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 par\u00e9ntesis izquierdo ( en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CADENA:{
        jj_consume_token(CADENA);
        break;
        }
      case NOMBRE_VAR:{
        jj_consume_token(NOMBRE_VAR);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CORCH_IZQ:{
            ;
            break;
            }
          default:
            jj_la1[6] = jj_gen;
            break label_5;
          }
          Arreglo();
        }
        break;
        }
      case NUMERO:{
        jj_consume_token(NUMERO);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case AND:
          case OR:
          case NOT:
          case SUMA:
          case RESTA:
          case MULTI:
          case DIV:{
            ;
            break;
            }
          default:
            jj_la1[7] = jj_gen;
            break label_6;
          }
          Operacion();
        }
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 una cadena, operaci\u00f3n o nombre de variable para imprimir en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    try {
      jj_consume_token(PAREN_DER);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 par\u00e9ntesis derecho ) en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    try {
      jj_consume_token(FIN_LINE);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 punto y coma ; en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
  }

  final public void Operacion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SUMA:
    case RESTA:
    case MULTI:
    case DIV:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SUMA:{
        jj_consume_token(SUMA);
        break;
        }
      case RESTA:{
        jj_consume_token(RESTA);
        break;
        }
      case MULTI:{
        jj_consume_token(MULTI);
        break;
        }
      case DIV:{
        jj_consume_token(DIV);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMERO:{
        jj_consume_token(NUMERO);
        break;
        }
      case NOMBRE_VAR:{
        jj_consume_token(NOMBRE_VAR);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case AND:
    case OR:
    case NOT:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        jj_consume_token(AND);
        break;
        }
      case OR:{
        jj_consume_token(OR);
        break;
        }
      case NOT:{
        jj_consume_token(NOT);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMERO:{
        jj_consume_token(NUMERO);
        break;
        }
      case NOMBRE_VAR:{
        jj_consume_token(NOMBRE_VAR);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void While() throws ParseException {
    jj_consume_token(WHILE);
    try {
      jj_consume_token(PAREN_IZQ);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 par\u00e9ntesis izquierdo ( en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    ComparacionLogica();
    try {
      jj_consume_token(PAREN_DER);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 par\u00e9ntesis derecho ) en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    try {
      jj_consume_token(LLAVE_IZQ);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 llave izquierda { en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    Sentencias();
    try {
      jj_consume_token(LLAVE_DER);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 llave derecha } en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
  }

  final public void DoWhile() throws ParseException {
    jj_consume_token(DO);
    try {
      jj_consume_token(LLAVE_IZQ);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 llave izquierda { en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    Sentencias();
    try {
      jj_consume_token(LLAVE_DER);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 llave derecha } en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    try {
      jj_consume_token(WHILE);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 while en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    try {
      jj_consume_token(PAREN_IZQ);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 par\u00e9ntesis izquierdo ( en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    ComparacionLogica();
    try {
      jj_consume_token(PAREN_DER);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 par\u00e9ntesis derecho ) en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    try {
      jj_consume_token(FIN_LINE);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 punto y coma ; en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
  }

  final public void Declaracion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:{
      jj_consume_token(INTEGER);
      break;
      }
    case FLOAT:{
      jj_consume_token(FLOAT);
      break;
      }
    case BOOLEANO:{
      jj_consume_token(BOOLEANO);
      break;
      }
    case STRING:{
      jj_consume_token(STRING);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(NOMBRE_VAR);
    try {
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASIGNA:{
          ;
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          break label_7;
        }
        jj_consume_token(ASIGNA);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NUMERO:{
          jj_consume_token(NUMERO);
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case AND:
            case OR:
            case NOT:
            case SUMA:
            case RESTA:
            case MULTI:
            case DIV:{
              ;
              break;
              }
            default:
              jj_la1[16] = jj_gen;
              break label_8;
            }
            Operacion();
          }
          break;
          }
        case CADENA:{
          jj_consume_token(CADENA);
          break;
          }
        case CORCH_IZQ:{
          Arreglo();
          break;
          }
        case NOMBRE_VAR:{
          jj_consume_token(NOMBRE_VAR);
          label_9:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case AND:
            case OR:
            case NOT:
            case SUMA:
            case RESTA:
            case MULTI:
            case DIV:{
              ;
              break;
              }
            default:
              jj_la1[17] = jj_gen;
              break label_9;
            }
            Operacion();
          }
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se termin\u00f3 la inicializaci\u00f3n en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    try {
      jj_consume_token(FIN_LINE);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 punto y coma ; en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
  }

  final public void Arreglo() throws ParseException {
    try {
      jj_consume_token(CORCH_IZQ);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 corchete izquierdo [ en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    try {
      jj_consume_token(NUMERO);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 un n\u00famero en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    try {
      jj_consume_token(CORCH_DER);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 corchete derecho ] en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CORCH_IZQ:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_10;
      }
      Arreglo();
    }
  }

  final public void ComparacionLogica() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOMBRE_VAR:{
        jj_consume_token(NOMBRE_VAR);
        break;
        }
      case NUMERO:{
        jj_consume_token(NUMERO);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 un operador para la comparaci\u00f3n l\u00f3gica en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    Comparaciones();
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOMBRE_VAR:{
        jj_consume_token(NOMBRE_VAR);
        break;
        }
      case NUMERO:{
        jj_consume_token(NUMERO);
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 un operador para la comparaci\u00f3n l\u00f3gica en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
  }

  final public void Comparaciones() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IGUAL_QUE:{
        jj_consume_token(IGUAL_QUE);
        break;
        }
      case DIFERENTE_QUE:{
        jj_consume_token(DIFERENTE_QUE);
        break;
        }
      case MAYOR_QUE:{
        jj_consume_token(MAYOR_QUE);
        break;
        }
      case MENOR_QUE:{
        jj_consume_token(MENOR_QUE);
        break;
        }
      case MAYOR_IGUAL_QUE:{
        jj_consume_token(MAYOR_IGUAL_QUE);
        break;
        }
      case MENOR_IGUAL_QUE:{
        jj_consume_token(MENOR_IGUAL_QUE);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 un token de comparaci\u00f3n l\u00f3gica en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
  }

  final public void If() throws ParseException {
    jj_consume_token(IF);
    try {
      jj_consume_token(PAREN_IZQ);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 par\u00e9ntesis izquierdo ( en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    ComparacionLogica();
    try {
      jj_consume_token(PAREN_DER);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 par\u00e9ntesis derecho ) en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    try {
      jj_consume_token(LLAVE_IZQ);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 llave izquierda { en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    Sentencias();
    try {
      jj_consume_token(LLAVE_DER);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 llave derecha } en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE_IF:{
        ;
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        break label_11;
      }
      Elseif();
    }
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE:{
        ;
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        break label_12;
      }
      Else();
    }
  }

  final public void Elseif() throws ParseException {
    jj_consume_token(ELSE_IF);
    try {
      jj_consume_token(PAREN_IZQ);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 par\u00e9ntesis izquierdo ( en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    ComparacionLogica();
    try {
      jj_consume_token(PAREN_DER);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 par\u00e9ntesis derecho ) en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    try {
      jj_consume_token(LLAVE_IZQ);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 llave izquierda { en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    Sentencias();
    try {
      jj_consume_token(LLAVE_DER);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 llave derecha } en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
  }

  final public void Else() throws ParseException {
    jj_consume_token(ELSE);
    try {
      jj_consume_token(LLAVE_IZQ);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 llave izquierda { en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    Sentencias();
    try {
      jj_consume_token(LLAVE_DER);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 llave derecha } en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
  }

  /** Generated Token Manager. */
  public analizadorTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1000000,0xce0780,0xce0780,0xe001c000,0x0,0x0,0x0,0xe001c000,0x0,0xe0000000,0x0,0x1c000,0x0,0xe001c000,0x780,0x0,0xe001c000,0xe001c000,0x0,0x0,0x0,0x0,0x0,0x200000,0x100000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x40000,0x40000,0x1,0x1c2000,0x800,0x2000,0x1,0x1c0000,0x1,0xc0000,0x0,0xc0000,0x1,0x0,0x80,0x1,0x1,0x1c2000,0x2000,0xc0000,0xc0000,0x7e,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public analizador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public analizador(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new analizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public analizador(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new analizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public analizador(analizadorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(analizadorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[54];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 54; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
