/* analizador.java */
/* Generated By:JavaCC: Do not edit this line. analizador.java */
import java.io.*;
import java.util.*;

public class analizador implements analizadorConstants {
    private static File codigoFuente;
    private static Environment environment = new Environment();  // Entorno para manejo de ámbitos

    public static void main(String[] args) {
        codigoFuente = new File(args[0]);
        environment.pushScope();  // Iniciar un ámbito global
        try {
            analizadorTokenManager lexicManager = new analizadorTokenManager(new SimpleCharStream(new FileReader(codigoFuente)));
            analizador parser = new analizador(lexicManager);
            try {
                parser.Programa();
                System.out.println("An\u00e1lisis completado sin errores.");
            } catch (ParseException ex) {
                System.out.println("Error sint\u00e1ctico: " + ex.getMessage());
            }
        } catch (FileNotFoundException ex) {
            System.err.println("Archivo no encontrado: " + args[0]);
        } catch (TokenMgrError ex) {
            System.err.println("Error l\u00e9xico: " + ex.getMessage());
        } finally {
            environment.popScope();  // Cerrar el ámbito global
        }
    }

  final public void Main() throws ParseException {
    try {
      Programa();
      jj_consume_token(0);
    } catch (ParseException e) {
System.out.println("Error de parseo: " + e.getMessage());
    }
  }

  final public void Programa() throws ParseException {
    jj_consume_token(INIT);
    Bloque();
    jj_consume_token(END);
  }

  final public void Bloque() throws ParseException {
    jj_consume_token(LLAVE_IZQ);
    Sentencias();
    jj_consume_token(LLAVE_DER);
  }

  final public void Sentencias() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:
      case FLOAT:
      case BOOLEANO:
      case STRING:
      case PRINT:
      case INPUT:
      case IF:
      case WHILE:
      case DO:
      case DEFINE_FUNC:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRINT:{
        Impresion();
        break;
        }
      case IF:{
        If();
        break;
        }
      case INTEGER:
      case FLOAT:
      case BOOLEANO:
      case STRING:{
        Declaracion();
        break;
        }
      case INPUT:{
        Lectura();
        break;
        }
      case WHILE:{
        While();
        break;
        }
      case DO:{
        DoWhile();
        break;
        }
      case DEFINE_FUNC:{
        Funcion();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Arreglo() throws ParseException {
    try {
      jj_consume_token(CORCH_IZQ);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 corchete izquierdo [ en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    try {
      jj_consume_token(NUMERO);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 un n\u00famero en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    try {
      jj_consume_token(CORCH_DER);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 corchete derecho ] en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CORCH_IZQ:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      Arreglo();
    }
  }

  final public void Operacion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMERO:{
      jj_consume_token(NUMERO);
      break;
      }
    case NOMBRE_VAR:{
      jj_consume_token(NOMBRE_VAR);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SUMA:
      case RESTA:
      case MULTI:
      case DIV:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SUMA:{
        jj_consume_token(SUMA);
        break;
        }
      case RESTA:{
        jj_consume_token(RESTA);
        break;
        }
      case MULTI:{
        jj_consume_token(MULTI);
        break;
        }
      case DIV:{
        jj_consume_token(DIV);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMERO:{
        jj_consume_token(NUMERO);
        break;
        }
      case NOMBRE_VAR:{
        jj_consume_token(NOMBRE_VAR);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Lectura() throws ParseException {
    jj_consume_token(INPUT);
    try {
      jj_consume_token(NOMBRE_VAR);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PAREN_IZQ:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_4;
        }
        jj_consume_token(PAREN_IZQ);
        jj_consume_token(PAREN_DER);
      }
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se detect\u00f3 un nombre de variable para leer en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    try {
      jj_consume_token(FIN_LINE);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 punto y coma ; en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
  }

  final public void Impresion() throws ParseException {
    jj_consume_token(PRINT);
    try {
      jj_consume_token(PAREN_IZQ);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 par\u00e9ntesis izquierdo ( en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CADENA:{
        jj_consume_token(CADENA);
        break;
        }
      case NOMBRE_VAR:{
        jj_consume_token(NOMBRE_VAR);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CORCH_IZQ:{
            ;
            break;
            }
          default:
            jj_la1[8] = jj_gen;
            break label_5;
          }
          Arreglo();
        }
        break;
        }
      case NUMERO:{
        jj_consume_token(NUMERO);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case NOMBRE_VAR:
          case NUMERO:{
            ;
            break;
            }
          default:
            jj_la1[9] = jj_gen;
            break label_6;
          }
          Operacion();
        }
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 una cadena, operaci\u00f3n o nombre de variable para imprimir en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    try {
      jj_consume_token(PAREN_DER);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 par\u00e9ntesis derecho ) en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
    try {
      jj_consume_token(FIN_LINE);
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 punto y coma ; en la l\u00ednea "+token.beginLine+", columna "+token.beginColumn+" despu\u00e9s de "+token.image);
    }
  }

  final public void Declaracion() throws ParseException {Token tipo;
    Token var;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:{
      jj_consume_token(INTEGER);
tipo = token;
      break;
      }
    case FLOAT:{
      jj_consume_token(FLOAT);
tipo = token;
      break;
      }
    case BOOLEANO:{
      jj_consume_token(BOOLEANO);
tipo = token;
      break;
      }
    case STRING:{
      jj_consume_token(STRING);
tipo = token;
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    var = jj_consume_token(NOMBRE_VAR);
String id = var.image;
        String type = tipo.image;
        if (environment.isDeclaredLocally(id)) {
            System.out.println("Error sem\u00e1ntico: Variable '" + id + "' ya declarada.");
        } else {
            environment.declareSymbol(id, type);
            System.out.println("Declarada variable '" + id + "' de tipo '" + type + "'");
        }
    jj_consume_token(FIN_LINE);
  }

  final public void Expresion() throws ParseException {
    Termino();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SUMA:
      case RESTA:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SUMA:{
        jj_consume_token(SUMA);
        Termino();
        break;
        }
      case RESTA:{
        jj_consume_token(RESTA);
        Termino();
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Termino() throws ParseException {
    Factor();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULTI:
      case DIV:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULTI:{
        jj_consume_token(MULTI);
        Factor();
        break;
        }
      case DIV:{
        jj_consume_token(DIV);
        Factor();
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMERO:{
      jj_consume_token(NUMERO);
      break;
      }
    case PAREN_IZQ:{
      jj_consume_token(PAREN_IZQ);
      Expresion();
      jj_consume_token(PAREN_DER);
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void If() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(PAREN_IZQ);
    Expresion();
    jj_consume_token(PAREN_DER);
    Bloque();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE_IF:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_9;
      }
      jj_consume_token(ELSE_IF);
      jj_consume_token(PAREN_IZQ);
      Expresion();
      jj_consume_token(PAREN_DER);
      Bloque();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      Bloque();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

  final public void While() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(PAREN_IZQ);
    Expresion();
    jj_consume_token(PAREN_DER);
    Bloque();
  }

  final public void DoWhile() throws ParseException {
    jj_consume_token(DO);
    Bloque();
    jj_consume_token(WHILE);
    jj_consume_token(PAREN_IZQ);
    Expresion();
    jj_consume_token(PAREN_DER);
    jj_consume_token(FIN_LINE);
  }

  final public void Funcion() throws ParseException {
    jj_consume_token(DEFINE_FUNC);
    jj_consume_token(VOID);
    jj_consume_token(NOMBRE_VAR);
    jj_consume_token(PAREN_IZQ);
    jj_consume_token(PAREN_DER);
    Bloque();
  }

  /** Generated Token Manager. */
  public analizadorTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1ce0780,0x1ce0780,0x0,0x0,0xe0000000,0xe0000000,0x0,0x0,0x0,0x0,0x0,0x780,0x60000000,0x60000000,0x80000000,0x80000000,0x0,0x200000,0x100000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x2000,0xc0000,0x1,0x1,0xc0000,0x800,0x2000,0xc0000,0x1c0000,0x0,0x0,0x0,0x1,0x1,0x80800,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public analizador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public analizador(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new analizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public analizador(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new analizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public analizador(analizadorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(analizadorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[54];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 54; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}

class SymbolTable {
    private HashMap<String, String> symbols = new HashMap<String, String>();

    public void declareSymbol(String identifier, String type) {
        symbols.put(identifier, type);
    }

    public String getSymbolType(String identifier) {
        return symbols.get(identifier);
    }

    public boolean isDeclared(String identifier) {
        return symbols.containsKey(identifier);
    }
}

class Environment {
    private LinkedList<SymbolTable> scopes = new LinkedList<SymbolTable>();

    public void pushScope() {
        scopes.push(new SymbolTable());
    }

    public void popScope() {
        if (!scopes.isEmpty()) {
            scopes.pop();
        }
    }

    public void declareSymbol(String identifier, String type) {
        if (!scopes.isEmpty()) {
            scopes.peek().declareSymbol(identifier, type);
        }
    }

    public String getSymbolType(String identifier) {
        for (SymbolTable table : scopes) {
            String type = table.getSymbolType(identifier);
            if (type != null) {
                return type;
            }
        }
        return null;
    }

    public boolean isDeclared(String identifier) {
        for (SymbolTable table : scopes) {
            if (table.isDeclared(identifier)) {
                return true;
            }
        }
        return false;
    }

    public boolean isDeclaredLocally(String identifier) {
        if (!scopes.isEmpty()) {
            return scopes.peek().isDeclared(identifier);
        }
        return false;
    }
}
