/* EpsilonTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. EpsilonTokenManager.java */

/** Token Manager. */
@SuppressWarnings("unused")public class EpsilonTokenManager implements EpsilonConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x10000000000L) != 0L)
            return 22;
         if ((active0 & 0x8000000000L) != 0L)
            return 21;
         if ((active0 & 0x80000000L) != 0L)
            return 51;
         if ((active0 & 0x1a03e0L) != 0L)
         {
            jjmatchedKind = 43;
            return 36;
         }
         if ((active0 & 0x18000000L) != 0L)
            return 20;
         if ((active0 & 0x20000000000L) != 0L)
            return 33;
         if ((active0 & 0x200000d010L) != 0L)
         {
            jjmatchedKind = 11;
            return 52;
         }
         if ((active0 & 0x300000000L) != 0L)
            return 53;
         if ((active0 & 0x4000000000L) != 0L)
            return 31;
         if ((active0 & 0x40000000L) != 0L)
            return 54;
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 11;
            return 16;
         }
         if ((active0 & 0x2000000L) != 0L)
            return 23;
         return -1;
      case 1:
         if ((active0 & 0x20000L) != 0L)
            return 36;
         if ((active0 & 0x20001cd3f0L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 1;
            return 36;
         }
         if ((active0 & 0x8000000L) != 0L)
            return 20;
         return -1;
      case 2:
         if ((active0 & 0x2000045000L) != 0L)
            return 36;
         if ((active0 & 0x1883f0L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 2;
            return 36;
         }
         return -1;
      case 3:
         if ((active0 & 0x108240L) != 0L)
            return 36;
         if ((active0 & 0x801b0L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 3;
            return 36;
         }
         return -1;
      case 4:
         if ((active0 & 0x80000L) != 0L)
            return 36;
         if ((active0 & 0x1b0L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 4;
            return 36;
         }
         return -1;
      case 5:
         if ((active0 & 0x30L) != 0L)
            return 36;
         if ((active0 & 0x180L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 5;
            return 36;
         }
         return -1;
      case 6:
         if ((active0 & 0x180L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 6;
            return 36;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa1_0(0x8L);
      case 33:
         jjmatchedKind = 32;
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 37:
         return jjStopAtPos(0, 36);
      case 38:
         return jjStartNfaWithStates_0(0, 31, 51);
      case 40:
         return jjStopAtPos(0, 21);
      case 41:
         return jjStopAtPos(0, 22);
      case 42:
         return jjStartNfaWithStates_0(0, 40, 22);
      case 43:
         return jjStartNfaWithStates_0(0, 39, 21);
      case 44:
         return jjStopAtPos(0, 29);
      case 45:
         return jjStartNfaWithStates_0(0, 38, 31);
      case 47:
         return jjStartNfaWithStates_0(0, 41, 33);
      case 58:
         return jjStopAtPos(0, 26);
      case 59:
         return jjStartNfaWithStates_0(0, 25, 23);
      case 60:
         return jjStopAtPos(0, 35);
      case 61:
         jjmatchedKind = 28;
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 62:
         return jjStopAtPos(0, 34);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x10L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xa0000L);
      case 123:
         return jjStopAtPos(0, 23);
      case 124:
         return jjStartNfaWithStates_0(0, 30, 54);
      case 125:
         return jjStopAtPos(0, 24);
      case 126:
         return jjStopAtPos(0, 42);
      default :
         return jjMoveNfa_0(13, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(1, 3);
         break;
      case 61:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 27, 20);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 33);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x104200L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x80040L);
      case 105:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(1, 17, 36);
         return jjMoveStringLiteralDfa2_0(active0, 0x40100L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x10L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000008020L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 36);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 36);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x140L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x10L);
      case 109:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 36);
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 110:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 36);
         break;
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 36);
         break;
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x10L);
      case 108:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 36);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 111:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 36);
         break;
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x20L);
      case 114:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 6, 36);
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x20L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x90L);
      case 110:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 36);
         break;
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x80L);
      case 111:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 4, 36);
         break;
      case 114:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 5, 36);
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 114:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 7, 36);
         break;
      case 115:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x0L, 0x40a220200000000L
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x0L, 0x2000000000000L
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x8000000000000000L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 51;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 52:
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 33)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddTwoStates(44, 45); }
                  }
                  else if (curChar == 38)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddTwoStates(38, 39); }
                  }
                  else if (curChar == 47)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(33); }
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(31); }
                  }
                  else if (curChar == 35)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(29); }
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(28); }
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(25); }
                  }
                  else if (curChar == 59)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(23); }
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(22); }
                  }
                  else if (curChar == 43)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(21); }
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(20); }
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(19); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddTwoStates(0, 1); }
                  else if (curChar == 63)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(26); }
                  }
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 53:
                  if (curChar == 33)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(45); }
                  }
                  if (curChar == 33)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(44); }
                  }
                  break;
               case 51:
                  if (curChar == 38)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(39); }
                  }
                  if (curChar == 38)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(38); }
                  }
                  break;
               case 0:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 1:
                  if ((0x7ff000100000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 39 && kind > 10)
                     kind = 10;
                  break;
               case 19:
                  if (curChar != 46)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAdd(19); }
                  break;
               case 20:
                  if (curChar != 61)
                     break;
                  kind = 43;
                  { jjCheckNAdd(20); }
                  break;
               case 21:
                  if (curChar != 43)
                     break;
                  kind = 43;
                  { jjCheckNAdd(21); }
                  break;
               case 22:
                  if (curChar != 42)
                     break;
                  kind = 43;
                  { jjCheckNAdd(22); }
                  break;
               case 23:
                  if (curChar != 59)
                     break;
                  kind = 43;
                  { jjCheckNAdd(23); }
                  break;
               case 25:
                  if (curChar != 34)
                     break;
                  kind = 43;
                  { jjCheckNAdd(25); }
                  break;
               case 26:
                  if (curChar != 63)
                     break;
                  kind = 43;
                  { jjCheckNAdd(26); }
                  break;
               case 28:
                  if (curChar != 36)
                     break;
                  kind = 43;
                  { jjCheckNAdd(28); }
                  break;
               case 29:
                  if (curChar != 35)
                     break;
                  kind = 43;
                  { jjCheckNAdd(29); }
                  break;
               case 31:
                  if (curChar != 45)
                     break;
                  kind = 43;
                  { jjCheckNAdd(31); }
                  break;
               case 33:
                  if (curChar != 47)
                     break;
                  kind = 43;
                  { jjCheckNAdd(33); }
                  break;
               case 37:
                  if (curChar != 38)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddTwoStates(38, 39); }
                  break;
               case 38:
                  if (curChar != 38)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAdd(38); }
                  break;
               case 39:
                  if (curChar != 38)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAdd(39); }
                  break;
               case 43:
                  if (curChar != 33)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddTwoStates(44, 45); }
                  break;
               case 44:
                  if (curChar != 33)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAdd(44); }
                  break;
               case 45:
                  if (curChar != 33)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAdd(45); }
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAdd(47); }
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(48, 49); }
                  break;
               case 49:
                  if (curChar == 46)
                     { jjCheckNAdd(50); }
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAdd(50); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 52:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(36); }
                  }
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     { jjCheckNAddTwoStates(3, 4); }
                  }
                  break;
               case 13:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(36); }
                  }
                  else if (curChar == 124)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddTwoStates(41, 42); }
                  }
                  else if (curChar == 93)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(35); }
                  }
                  else if (curChar == 91)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(34); }
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(32); }
                  }
                  else if (curChar == 94)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(30); }
                  }
                  else if (curChar == 64)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(18); }
                  }
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     { jjCheckNAddTwoStates(3, 4); }
                  }
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 86)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 54:
                  if (curChar == 124)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(42); }
                  }
                  if (curChar == 124)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(41); }
                  }
                  break;
               case 16:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(36); }
                  }
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     { jjCheckNAddTwoStates(3, 4); }
                  }
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 1:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjAddStates(3, 4); }
                  break;
               case 3:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 5:
                  if (curChar == 111 && kind > 16)
                     kind = 16;
                  break;
               case 6:
                  if (curChar == 114)
                     { jjCheckNAdd(5); }
                  break;
               case 7:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  if (curChar == 115)
                     { jjCheckNAdd(5); }
                  break;
               case 15:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 17:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar != 64)
                     break;
                  kind = 43;
                  { jjCheckNAdd(18); }
                  break;
               case 30:
                  if (curChar != 94)
                     break;
                  kind = 43;
                  { jjCheckNAdd(30); }
                  break;
               case 32:
                  if (curChar != 95)
                     break;
                  kind = 43;
                  { jjCheckNAdd(32); }
                  break;
               case 34:
                  if (curChar != 91)
                     break;
                  kind = 43;
                  { jjCheckNAdd(34); }
                  break;
               case 35:
                  if (curChar != 93)
                     break;
                  kind = 43;
                  { jjCheckNAdd(35); }
                  break;
               case 36:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAdd(36); }
                  break;
               case 40:
                  if (curChar != 124)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddTwoStates(41, 42); }
                  break;
               case 41:
                  if (curChar != 124)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAdd(41); }
                  break;
               case 42:
                  if (curChar != 124)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAdd(42); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 13:
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(24); }
                  }
                  if ((jjbitVec2[i2] & l2) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(27); }
                  }
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(3, 4); }
                  break;
               case 24:
                  if ((jjbitVec1[i2] & l2) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAdd(24); }
                  break;
               case 27:
                  if ((jjbitVec2[i2] & l2) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAdd(27); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 51 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   47, 48, 49, 1, 2, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\111\156\151\143\151\157", "\162\157\155\160\145\162", 
"\154\145\145\162", "\151\155\160\162\151\155\151\162", "\155\151\145\156\164\162\141\163", 
"\160\141\162\141", null, null, "\116\165\155", null, "\103\141\144", "\102\157\157\154", null, 
"\163\151", "\106\151\156", "\163\145\147\165\156", "\143\141\163\157", "\50", "\51", 
"\173", "\175", "\73", "\72", "\75\75", "\75", "\54", "\174", "\46", "\41", "\41\75", 
"\76", "\74", "\45", "\115\157\144", "\55", "\53", "\52", "\57", "\176", null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public EpsilonTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public EpsilonTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 51; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffff1L, 
};
static final long[] jjtoSkip = {
   0xeL, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[51];
    private final int[] jjstateSet = new int[2 * 51];

    
    protected char curChar;
}
